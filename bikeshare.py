# -*- coding: utf-8 -*-
"""유다자전거.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vj8-yCA5Dj5qHav9XDC5nSISLGMPpQOJ
"""
#Udacity project File
import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: Please enter a city name "Chicago, New York, Washington"
def get_city():
    while True:
        city = input('Please enter a city name (chicago, new york city, washington): ').lower()
        if city in CITY_DATA:
            break
        else:
            print('Invalid input. Please enter a valid city.')
    return city

    # TO DO: get user input for month (all, january, february, ... , june)
def get_month():
      while True:
        months = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
        month = input('Please enter a month (all, january, february, march, april, may, june): ').lower()
        if month in month :
            break
        else:
            print('Invalid input. Please enter a valid month.')
        return month

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
def get_day():
      while True:
        days = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day = input('Please enter a day of week (all, monday, tuesday, wednesday, thursday, friday, saturday, sunday): ').lower()
        if day in days:
            break
        else:
            print('Invalid input. Please enter a valid day of the week.')
        return day

        print('-'*40)
        return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # Load the citydata into the data frame
    df = pd.read_csv(CITY_DATA[city])

    # Data cleaning and formatting
    return df

    # TO DO: convert the Start Time, End Time column to datetime
    # TO DO: extract month and day of week from Start Time to create new columns
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    df['Month'] = df['Start Time'].dt.month
    df['Day'] = df['Start Time'].dt.strftime('%A').str.lower()


    # TO DO: filter by month if applicable
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['Month'] == month]



    # Filtering by month, Day of the Week

    if day != 'all':
        df = df[df['Day'] == day]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    common_month = df['month'].mode()[0]
    print(f"The most common month: {common_month}")

    # TO DO: display the most common day of week
    common_day = df['day'].mode()[0]
    print(f"The most common day: {common_day}")

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_start_hour = df['hour'].mode()[0]
    print(f"The most common start hour: {common_start_hour}")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common_start_station = df['Start Station'].mode()[0]
    print(f"The most commonly used start station: {common_start_station}")


    # TO DO: display most commonly used end station
    common_end_station = df['End Station'].mode()[0]
    print(f"The most commonly used end station: {common_end_station}")


    # TO DO: display most frequent combination of start station and end station trip
    df['Combination'] = df['Start Station'] + ' to ' + df['End Station']
    common_combination = df['Combination'].mode()[0]
    print(f"The most frequent combination of start and end station trip: {common_combination}")


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print(f"Total travel time: {total_travel_time} seconds")


    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print(f"Mean travel time: {mean_travel_time} seconds")


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_type_counts = df['User Type'].value_counts()
    print("Counts of user types:")
    print(user_type_counts)


    # TO DO: Display counts of gender
    if 'Gender' in df:
        gender_counts = df['Gender'].value_counts()
        print("\nCounts of gender:")
        print(gender_counts)
    else:
        print("\nGender data not available in this dataset.")


    # TO DO: Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df:
        earliest_birth_year = df['Birth Year'].min()
        most_recent_birth_year = df['Birth Year'].max()
        common_birth_year = df['Birth Year'].mode()[0]
        print("\nEarliest birth year:", int(earliest_birth_year))
        print("Most recent birth year:", int(most_recent_birth_year))
        print("Most common birth year:", int(common_birth_year))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_raw_data(df):
    """Displays raw data to the user in groups of 5 rows at a time."""
    i = 1

    while True:
        rawdata = input('\nWould you like to see 5 lines of raw data? Enter yes or no.\n')
        if rawdata.lower() == 'yes':
            print(df[i:i+5])
            i = i+5
        else:
            break

#Main Fuction
def main():
    while True:
        city = get_city()
        month = get_month()
        day = get_day()

        df = load_data(city, month, day)
        analyze_data(df)

        restart = input('\nEnter yes to continue: ')
        if restart.lower() != 'yes':
            break

#Perform analysis on bikeshare data
def analyze_data(df):
    time_stats(df)
    station_stats(df)
    trip_duration_stats(df)
    user_stats(df)
    display_raw_data(df)


#time
def time_stats(df):
      pass
def station_stats(df):
      pass
def trip_duration_stats(df):
      pass



if __name__ == "__main__":
    main()